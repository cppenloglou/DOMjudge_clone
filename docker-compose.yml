services:
  # Database services
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --timeout 60 --databases 1 --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Executor services
  c_executor:
    image: cppenloglou/c_executor:latest
    build:
      context: ./executors/c_executor
      dockerfile: Dockerfile-c
    ports:
      - "5003:8000"
    volumes:
      - ./executors/c_executor/problems:/app/problems:ro
    networks:
      - executor_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  cpp_executor:
    image: cppenloglou/cpp_executor:latest
    build:
      context: ./executors/cpp_executor
      dockerfile: Dockerfile-cpp
    ports:
      - "5001:8000"
    volumes:
      - ./executors/cpp_executor/problems:/app/problems:ro
    networks:
      - executor_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  java_executor:
    image: cppenloglou/java_executor:latest
    build:
      context: ./executors/java_executor
      dockerfile: Dockerfile-java
    ports:
      - "5004:8000"
    volumes:
      - ./executors/java_executor/problems:/app/problems:ro
    networks:
      - executor_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  python_executor:
    image: cppenloglou/python_executor:latest
    build:
      context: ./executors/python_executor
      dockerfile: Dockerfile-python
    ports:
      - "5002:8000"
    volumes:
      - ./executors/python_executor/problems:/app/problems:ro
    networks:
      - executor_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend service
  backend:
    container_name: backend
    image: cppenloglou/backend:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      c_executor:
        condition: service_healthy
      cpp_executor:
        condition: service_healthy
      python_executor:
        condition: service_healthy
      java_executor:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mydatabase
      - SPRING_DATASOURCE_USERNAME=myuser
      - SPRING_DATASOURCE_PASSWORD=secret
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - DOCKER_CPP_BASE_HOST=cpp_executor
      - DOCKER_C_BASE_HOST=c_executor
      - DOCKER_PYTHON_BASE_HOST=python_executor
      - DOCKER_JAVA_BASE_HOST=java_executor
      - DOCKER_CPP_EXECUTOR_PORT=8000
      - DOCKER_C_EXECUTOR_PORT=8000
      - DOCKER_PYTHON_EXECUTOR_PORT=8000
      - DOCKER_JAVA_EXECUTOR_PORT=8000
      - FRONTEND_BASE_URL=http://localhost:3000
    networks:
      - backend_network
      - executor_network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend service
  frontend:
    container_name: frontend
    image: cppenloglou/frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_APP_BASE_URL: ${VITE_APP_BASE_URL:-http://localhost:8080}
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

  # Watchtower service to auto-update backend and frontend
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 30 backend frontend
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge
  executor_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
